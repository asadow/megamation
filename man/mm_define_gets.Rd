% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{mm_define_gets}
\alias{mm_define_gets}
\title{Define GET requests}
\usage{
mm_define_gets(endpoint, ..., allfields = TRUE)
}
\arguments{
\item{endpoint}{The API endpoint. For example,
\code{"timecard"} for employee transactions, and \code{"workorder"}
for work orders. All endpoints are listed at
https://apidocs.megamation.com/.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> Name-value pairs to filter the
request. The name should be the lower-case name of a field that is
filter-enabled (in Megamation's words, a criteria). These arguments are
processed with \code{\link[rlang:defusing-advanced]{rlang::quos()}} and support unquote via \code{\link{!!}} and
unquote-splice via \code{\link{!!!}}.}

\item{allfields}{If \code{TRUE}, return all fields currently available for
the endpoint.}
}
\value{
A list of GET requests of class \code{httr2_request}.
}
\description{
\code{mm_define_gets()} will
return the necessary GET requests for fetching the supplied endpoint and
parameters.
Multiple GET requests are sometimes necessary for two reasons.

One, Megamation does not support common ways of separating multiple
values for a field inside an HTTP URL. These ways include:
\itemize{
\item using a \verb{,}, e.g. \verb{?x=1,2}
\item using a \code{|}, e.g. \code{?x=1|2}
\item turning each element into its own parameter, e.g. \code{?x=1&x=2}
}

For Megamation, the first two ways will result in a 404 error.
The last way fetches data where x is both 1 and 2 (instead of 1 or 2).
Hence this function creates separate GET requests for each separate value
supplied to a parameter.

The second reason for multiple GET requests regards the timecard endpoint,
which is unique in that separate GET requests must be made for separate years
of data (e.g. 2022 vs 2023). This is also automatically handled by
\code{mm_define_gets()}.
}
\examples{
\dontshow{if (megamation:::has_creds()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Get timecard entries from Jan. 2022 to 2023:

# Create a Date-type vector
date <- seq.Date(
  as.Date("2022-01-01"),
  as.Date("2023-01-31"),
  by = "day"
)

mm_define_gets("timecard", date = date)
\dontshow{\}) # examplesIf}
}
