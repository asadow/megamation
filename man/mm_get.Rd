% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get.R
\name{mm_get}
\alias{mm_get}
\title{Get data}
\usage{
mm_get(endpoint, ..., allfields = TRUE)
}
\arguments{
\item{endpoint}{The API endpoint. For example,
\code{"timecard"} for employee transactions, and \code{"workorder"}
for work orders. All endpoints are listed at
https://apidocs.megamation.com/.}

\item{...}{<\code{\link[rlang:dyn-dots]{dynamic-dots}}> Name-value pairs to filter the
request. The name should be the lower-case name of a field that is
filter-enabled (in Megamation's words, a criteria). These arguments are
processed with \code{\link[rlang:defusing-advanced]{rlang::quos()}} and support unquote via \code{\link{!!}} and
unquote-splice via \code{\link{!!!}}.}

\item{allfields}{If \code{TRUE}, return all fields currently available for
the endpoint.}
}
\value{
A data frame of class \code{\link[tibble:tbl_df-class]{tbl_df}}
containing the requested data.
}
\description{
Download Megamation data you own via the API and import the data into R.

\code{mm_get()} accomplishes a variety of conveniences when fetching data from
Megamation. It creates the necessary API GET requests, performs them,
converts response bodies to data frames, and finally binds them
}
\examples{
\dontshow{if (megamation:::has_creds()) (if (getRversion() >= "3.4") withAutoprint else force)(\{ # examplesIf}
# Get all timecard entries from Jan. 2023:

# Create a Date-type vector
jan_2023 <- seq.Date(
  as.Date("2023-01-01"),
  as.Date("2023-01-31"),
  by = "day"
)

mm_get("timecard", date = jan_2023)
\dontshow{\}) # examplesIf}
}
